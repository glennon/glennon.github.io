# Alan Glennon
# 17 November 2012
# GeyserSynth: Visitor

# This code run a random walk around the Upper Geyser Basin at Yellowstone.
# The trail is subdivided into nodes 160 meters apart... two minutes of casual walking speed
# A set of synthetic eruption data is produced
# Five geysers are tracked and the view quality differs at various nodes.
# The number of geysers viewed are tabulated
# geyser eruptions are defined by their start time only.
# geyser with times ending in odd numbers are subtracted by one to make the time even.


import random

print("Naive Run with Synthetic Data")

# viewshed data
castleview = {'1':[1],'2': [0.5],'12':[0.5],'13':[0.5],'15':[0.5],'16':[0.5],'35':[0.5],'38':[0.5]}
daisyview = {'30':[1],'32':[1],'17':[0.5],'18':[0.5],'23':[0.5],'24':[0.5],'26':[0.5],'27':[0.5],'28':[0.5],'29':[0.5],'31':[0.5]}
grandview = {'17':[1],'18':[0.5],'28':[0.5]}
oldfaithfulview = {'6':[1],'7':[1],'8':[1],'3':[0.5],'4':[0.5],'5':[0.5],'9':[0.5],'11':[0.5],'12':[0.5],'13':[0.5],'14':[0.5],'15':[0.5],'16':[0.5],'36':[0.5]}
riversideview = {'40':[1],'33':[0.5]}

# eruption times
#realtimes = 1
#if realtimes == 1:
        #oldfaithfultimes = [830,1004,1132,1258,1424,1608,1738,1916]
        #daisytimes = [1004,1232,1454,1724]
        #riversidetimes = [1220,1828]
        #grandtimes = [1132,1746]
        #castletimes = [1756]








# visitor path linkages
mygraph = {'1': ['1','2','38','19'],
         '2': ['1','2', '3'],
         '3': ['2','3','4'],
         '4': ['3','4','5'],
         '5': ['4','5','6','9'],
         '6': ['5','6','7'],
         '7': ['6','7','8'],
         '8': ['7','8','10','36'],
         '9': ['5','9','36'],
         '10': ['8','10','11','37'],
         '11': ['10','11','12'],
         '12': ['11','12','13'],
         '13': ['12','13','14','35'],
         '14': ['13','14','15'],
         '15': ['14','15','16'],
         '16': ['15','16','17','38'],
         '17': ['16','17','18'],
         '18': ['17','18','28'],
         '19': ['1','19','20'],
         '20': ['19','20','21'],
         '21': ['20','21','22'],
         '22': ['21','22','23'],
         '23': ['22','23','24','29'],
         '24': ['23','24','25','31'],
         '25': ['24','25','26','33','40'],
         '26': ['25','26','27'],
         '27': ['26','27','28'],
         '28': ['18','27','28'],
         '29': ['23','29','30'],
         '30': ['29','30','39'],
         '31': ['24','31','32'],
         '32': ['31','32','39'],
         '33': ['25','33','34','40'],
         '34': ['33','34'],
         '35': ['13','35','37'],
         '36': ['8','9','36'],
         '37': ['10','35','37'],
         '38': ['1','16','38'],
         '39': ['30','32','39'],
         '40': ['25','33','40']}



# big loop stuff and scores
currentloop = 0
totalloopsstring = input('Number of Loops: ') #100000
totalloops = int(totalloopsstring)
bigloopCSscore = 0
bigloopDYscore = 0
bigloopGRscore = 0
bigloopOFscore = 0
bigloopRVscore = 0
bigloopCSobs = 0
bigloopDYobs = 0
bigloopGRobs = 0
bigloopOFobs = 0
bigloopRVobs = 0


print('0%')

while currentloop < totalloops:


    # create synthetic oldfaithful eruptions
    OFsynthminutecount = 0
    OFmax = 110
    OFmin = 77
    OFmedian = 90
    # OFpreseed = random.randint(OFmin, OFmax)
    firstOFseed = random.randint(0,(OFmax-1))
    OFeruptiontime = firstOFseed
    numberOFeruptions = 0
    OFraweruptions = list()
    oldfaithfultimes = list()
    while OFsynthminutecount < 1440:
        if OFsynthminutecount == OFeruptiontime:
                OFraweruptions.insert(numberOFeruptions,OFeruptiontime)
                if OFeruptiontime%2==0:
                        # insert converted hours:min into array
                        OFnewtime = ((OFeruptiontime//60)*100) + (OFeruptiontime%60)
                        oldfaithfultimes.insert(numberOFeruptions,OFnewtime)
                else:
                        evenOFeruptiontime = OFeruptiontime - 1
                        OFnewtime = ((evenOFeruptiontime//60)*100) + (evenOFeruptiontime%60)
                        oldfaithfultimes.insert(numberOFeruptions,OFnewtime)       
                #print(OFraweruptions[numberOFeruptions],' :: ',oldfaithfultimes[numberOFeruptions])
                numberOFeruptions = numberOFeruptions + 1
                OFeruptiontime = OFeruptiontime + random.randint(OFmin, OFmax)
        OFsynthminutecount = OFsynthminutecount + 1

    # create synthetic castle eruptions
    CSsynthminutecount = 0
    CSmax = 967
    CSmin = 807
    firstCSseed = random.randint(0,(CSmax-1))
    CSeruptiontime = firstCSseed
    numberCSeruptions = 0
    CSraweruptions = list()
    castletimes = list()
    while CSsynthminutecount < 1440:
        if CSsynthminutecount == CSeruptiontime:
                CSraweruptions.insert(numberCSeruptions,CSeruptiontime)
                if CSeruptiontime%2==0:
                        # insert converted hours:min into array
                        CSnewtime = ((CSeruptiontime//60)*100) + (CSeruptiontime%60)
                        castletimes.insert(numberCSeruptions,CSnewtime)
                else:
                        evenCSeruptiontime = CSeruptiontime - 1
                        CSnewtime = ((evenCSeruptiontime//60)*100) + (evenCSeruptiontime%60)
                        castletimes.insert(numberCSeruptions,CSnewtime)       
                #print(CSraweruptions[numberCSeruptions],' :: ',castletimes[numberCSeruptions])
                numberCSeruptions = numberCSeruptions + 1
                CSeruptiontime = CSeruptiontime + random.randint(CSmin, CSmax)
        CSsynthminutecount = CSsynthminutecount + 1

    # create synthetic Daisy eruptions
    DYsynthminutecount = 0
    DYmax = 200
    DYmin = 127
    firstDYseed = random.randint(0,(DYmax-1))
    DYeruptiontime = firstDYseed
    numberDYeruptions = 0
    DYraweruptions = list()
    daisytimes = list()
    while DYsynthminutecount < 1440:
        if DYsynthminutecount == DYeruptiontime:
                DYraweruptions.insert(numberDYeruptions,DYeruptiontime)
                if DYeruptiontime%2==0:
                        # insert converted hours:min into array
                        DYnewtime = ((DYeruptiontime//60)*100) + (DYeruptiontime%60)
                        daisytimes.insert(numberDYeruptions,DYnewtime)
                else:
                        evenDYeruptiontime = DYeruptiontime - 1
                        DYnewtime = ((evenDYeruptiontime//60)*100) + (evenDYeruptiontime%60)
                        daisytimes.insert(numberDYeruptions,DYnewtime)       
                # print(DYraweruptions[numberDYeruptions],' :: ',daisytimes[numberDYeruptions])
                numberDYeruptions = numberDYeruptions + 1
                DYeruptiontime = DYeruptiontime + random.randint(DYmin, DYmax)
        DYsynthminutecount = DYsynthminutecount + 1

    # create synthetic Grand eruptions
    GRsynthminutecount = 0
    GRmax = 540
    GRmin = 396
    firstGRseed = random.randint(0,(GRmax-1))
    GReruptiontime = firstGRseed
    numberGReruptions = 0
    GRraweruptions = list()
    grandtimes = list()
    while GRsynthminutecount < 1440:
        if GRsynthminutecount == GReruptiontime:
                GRraweruptions.insert(numberGReruptions,GReruptiontime)
                if GReruptiontime%2==0:
                        # insert converted hours:min into array
                        GRnewtime = ((GReruptiontime//60)*100) + (GReruptiontime%60)
                        grandtimes.insert(numberGReruptions,GRnewtime)
                else:
                        evenGReruptiontime = GReruptiontime - 1
                        GRnewtime = ((evenGReruptiontime//60)*100) + (evenGReruptiontime%60)
                        grandtimes.insert(numberGReruptions,GRnewtime)       
                #print(GRraweruptions[numberGReruptions],' :: ',grandtimes[numberGReruptions])
                numberGReruptions = numberGReruptions + 1
                GReruptiontime = GReruptiontime + random.randint(GRmin, GRmax)
        GRsynthminutecount = GRsynthminutecount + 1


    # create synthetic Riverside eruptions
    RVsynthminutecount = 0
    RVmax = 379
    RVmin = 319
    firstRVseed = random.randint(0,(RVmax-1))
    RVeruptiontime = firstRVseed
    numberRVeruptions = 0
    RVraweruptions = list()
    riversidetimes = list()
    while RVsynthminutecount < 1440:
        if RVsynthminutecount == RVeruptiontime:
                RVraweruptions.insert(numberRVeruptions,RVeruptiontime)
                if RVeruptiontime%2==0:
                        # insert converted hours:min into array
                        RVnewtime = ((RVeruptiontime//60)*100) + (RVeruptiontime%60)
                        riversidetimes.insert(numberRVeruptions,RVnewtime)
                else:
                        evenRVeruptiontime = RVeruptiontime - 1
                        RVnewtime = ((evenRVeruptiontime//60)*100) + (evenRVeruptiontime%60)
                        riversidetimes.insert(numberRVeruptions,RVnewtime)       
                #print(RVraweruptions[numberRVeruptions],' :: ',riversidetimes[numberRVeruptions])
                numberRVeruptions = numberRVeruptions + 1
                RVeruptiontime = RVeruptiontime + random.randint(RVmin, RVmax)
        RVsynthminutecount = RVsynthminutecount + 1
            
    

    progressbar = currentloop/totalloops
    if (progressbar == 0.1):
            print('10%')
    if (progressbar == 0.2):
            print('20%')
    if (progressbar == 0.3):
            print('30%')
    if (progressbar == 0.4):
            print('40%')
    if (progressbar == 0.5):
            print('50%')
    if (progressbar == 0.6):
            print('60%')
    if (progressbar == 0.7):
            print('70%')
    if (progressbar == 0.8):
            print('80%')
    if (progressbar == 0.9):
            print('90%')

    # start at this node
    # randomstart = 6 # visitor center
    # randomstart = random.randint(3, 8) # visitors enter basin at nodes 3-8
    randomstart = random.randint(1, 40) # visitors enter basin at nodes 1-40
    currentnode = str(randomstart)

    # initialize geyser view scores
    grandscore = 0
    oldfaithfulscore = 0
    daisyscore = 0
    riversidescore = 0
    castlescore = 0

    # initialize number of observations per geyser
    castleobs = 0
    daisyobs = 0
    grandobs = 0
    oldfaithfulobs = 0
    riversideobs = 0

    ##number of items for any particular key
    # len(graph['thekey'])
    # print(len(graph['34']))

    ## gives the value for key '34' at address 1 (note: value addresses start at 0)
    #print(graph['34'][1])

    # variables to handle time
    starttime = 800
    endtime = 2200
    mytime = starttime
    hourcheckincrement = 0
    currentstep = 0


    # the big loop... loops through by time
    # currentstep is the numerical step
    # mytime is the current time
    while mytime < endtime:

        if hourcheckincrement == 30: # two minute intervals, so 30 increments is an hour
            mytime = mytime + 40 # roll over to the next hour when you get to 60 minutes pass the hour
            hourcheckincrement = 0

        # check to see whether grand is in eruption at the current time
        if (mytime in grandtimes):
            # check for whether a geyser is visible and at the highest quality nodes
            if (currentnode in grandview):
                # figure out the view quality
                grandincrement = grandview[currentnode][0]
                # increment the score for this geyser
                grandscore = grandscore + grandincrement
                grandobs = grandobs + 1
                #print('current_time: ',mytime,' , Node: ', currentnode, 'Grand View Score: ',grandincrement)

        # check to see whether Old Faithful is in eruption at the current time
        if (mytime in oldfaithfultimes):
            # check for whether a geyser is visible and at the highest quality nodes
            if (currentnode in oldfaithfulview):
                # figure out the view quality
                oldfaithfulincrement = oldfaithfulview[currentnode][0]
                # increment the score for this geyser
                oldfaithfulscore = oldfaithfulscore + oldfaithfulincrement
                oldfaithfulobs = oldfaithfulobs + 1
                #print('current_time: ',mytime,' , Node: ', currentnode, 'OF View Score: ',oldfaithfulincrement)


        # check to see whether Daisy is in eruption at the current time
        if (mytime in daisytimes):
            # check for whether a geyser is visible and at the highest quality nodes
            if (currentnode in daisyview):
                # figure out the view quality
                daisyincrement = daisyview[currentnode][0]
                # increment the score for this geyser
                daisyscore = daisyscore + daisyincrement
                daisyobs = daisyobs + 1
                #print('current_time: ',mytime,' , Node: ', currentnode, 'Daisy View Score: ',daisyincrement)


        # check to see whether Riverside is in eruption at the current time
        if (mytime in riversidetimes):
            # check for whether a geyser is visible and at the highest quality nodes
            if (currentnode in riversideview):
                # figure out the view quality
                riversideincrement = riversideview[currentnode][0]
                # increment the score for this geyser
                riversidescore = riversidescore + riversideincrement
                riversideobs = riversideobs + 1
                #print('current_time: ',mytime,' , Node: ', currentnode, 'Riverside View Score: ',riversideincrement)
                            
        # check to see whether Castle is in eruption at the current time
        if (mytime in castletimes):
            # check for whether a geyser is visible and at the highest quality nodes
            if (currentnode in castleview):
                # figure out the view quality
                castleincrement = castleview[currentnode][0]
                # increment the score for this geyser
                castlescore = castlescore + castleincrement
                castleobs = castleobs + 1
                #print('current_time: ',mytime,' , Node: ', currentnode, 'Castle View Score: ',castleincrement)

        
            
        #print('current_time: ',mytime,' , Node: ', currentnode)
        mytime = mytime + 2

        hourcheckincrement = hourcheckincrement + 1

        # number of choices at current node
        numberinthiskey = len(mygraph[currentnode])
        # choose the address of one of the choices
        randomguy = random.randint(0, (numberinthiskey-1))
        # make that choice the new currentnode
        currentnode = mygraph[currentnode][randomguy]

    #print('My Castle score is: ', castlescore, ' / ',castleobs)
    #print('My Daisy score is: ', daisyscore, ' / ',daisyobs)
    #print('My Grand score is: ', grandscore, ' / ', grandobs)
    #print('My Old Faithful score is: ', oldfaithfulscore, ' / ', oldfaithfulobs)
    #print('My Riverside score is: ', riversidescore, ' / ', riversideobs)


    bigloopCSscore = bigloopCSscore + castlescore
    bigloopDYscore = bigloopDYscore + daisyscore
    bigloopGRscore = bigloopGRscore + grandscore
    bigloopOFscore = bigloopOFscore + oldfaithfulscore
    bigloopRVscore = bigloopRVscore + riversidescore
    bigloopCSobs = bigloopCSobs + castleobs
    bigloopDYobs = bigloopDYobs + daisyobs
    bigloopGRobs = bigloopGRobs + grandobs
    bigloopOFobs = bigloopOFobs + oldfaithfulobs
    bigloopRVobs = bigloopRVobs + riversideobs
    
    currentloop = currentloop + 1

# will error if any denom is zero... could create an error check for this
print('Geyser: avg quality score / avg observations total = quality ratio')
print('Castle: ', bigloopCSscore/totalloops, ' / ', bigloopCSobs/totalloops, ' = ', bigloopCSscore/bigloopCSobs )
print('Daisy: ', bigloopDYscore/totalloops, ' / ', bigloopDYobs/totalloops, ' = ', bigloopDYscore/bigloopDYobs )
print('Grand: ', bigloopGRscore/totalloops, ' / ', bigloopGRobs/totalloops, ' = ', bigloopGRscore/bigloopGRobs )
print('Old Faithful: ', bigloopOFscore/totalloops, ' / ', bigloopOFobs/totalloops, ' = ', bigloopOFscore/bigloopOFobs )
print('Riverside: ', bigloopRVscore/totalloops, ' / ', bigloopRVobs/totalloops, ' = ', bigloopRVscore/bigloopRVobs )
